name: WebApp Deploy DEV (no Fleek)
on:
  workflow_dispatch:
  push:
    paths:
      - 'packages/web-app/**'
      - '!.github/**'
    branches:
      - 'develop'
      - 'DOPS-445*'       ## temporal branch for testing only

jobs:
  setup-env-vars:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.envtest.outputs.environment }}${{ steps.envdev.outputs.environment }}
      branch_prefix: ${{ steps.envtest.outputs.branch_prefix }}${{ steps.envdev.outputs.branch_prefix }}

    steps:
      - name: Set environment to TEST
        if: contains(github.ref, '/DOPS-445')
        id: envtest
        run: |
          echo "environment=development" >> $GITHUB_OUTPUT    ## temp, change it if have another env 
          echo "branch_prefix=test" >> $GITHUB_OUTPUT         ## used it in docker tags

      - name: Set environment to DEV
        if: endsWith(github.ref, '/develop')
        id: envdev
        run: |
          echo "environment=development" >> $GITHUB_OUTPUT
          echo "branch_prefix=develop" >> $GITHUB_OUTPUT

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [setup-env-vars]
    if: needs.setup-env-vars.outputs.environment != ''
    environment: ${{ needs.setup-env-vars.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup NodeJS, install deps from parent folder
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'yarn'
        
      - name: Install deps, build and link ui-components
        run: |
          cd packages/ui-components
          yarn install --pure-lockfile
          yarn build
          yarn link
    
      - name: Install deps and link web-app
        run: |
          cd packages/web-app
          yarn install --pure-lockfile
          yarn link @aragon/ui-components

      # - name: Run Lint and Test web-app
      #   run: |
      #     cd packages/web-app
      #     yarn lint
      #     yarn test

      - name: Build web-app
        run: |
          cd packages/web-app 
          yarn build
        env:
          VITE_REACT_APP_DEPLOY_VERSION: ${{ github.sha }}
          VITE_REACT_APP_DEPLOY_ENVIRONMENT: ${{ needs.setup-env-vars.outputs.environment }}
          VITE_REACT_APP_ANALYTICS_KEY: ${{ secrets.VITE_REACT_APP_ANALYTICS_KEY }}
          VITE_IPFS_API_KEY: ${{ secrets.VITE_IPFS_API_KEY }}
          VITE_ETHERSCAN_API_KEY: ${{ secrets.VITE_ETHERSCAN_API_KEY }}
          VITE_INFURA_GOERLI_PROJECT_ID: ${{ secrets.VITE_INFURA_GOERLI_PROJECT_ID }}
          VITE_INFURA_MAINNET_PROJECT_ID: ${{ secrets.VITE_INFURA_MAINNET_PROJECT_ID }}
          NODE_OPTIONS: '--max-old-space-size=6656'

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Git hash and Timestamp in seconds
        id: vars
        run: |
          echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr '/' '-' )" >> $GITHUB_OUTPUT
          echo "GIT_HASH_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "DATE_IN_SECS=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Set swap space on Runner
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 12

      ## Use this step instead of `docker/build-push-action@v4` to avoid JavaScript heap out memory error
      ## Using 'docker buildx build ...' allows controlling memory and memory-swap
      ## https://developer.ibm.com/articles/nodejs-memory-management-in-container-environments/
      ## https://docs.docker.com/engine/reference/commandline/buildx_build/#build-arg
      - name: Build Docker image from scratch
        run: |
          mkdir -p /tmp/docker-build-push-${{ steps.vars.outputs.DATE_IN_SECS }}/
          docker buildx build . --file ./Dockerfile.webapp.dev --push \
          --build-arg VITE_REACT_APP_DEPLOY_VERSION=${{ github.sha }} \
          --build-arg VITE_REACT_APP_DEPLOY_ENVIRONMENT=${{ needs.setup-env-vars.outputs.environment }} \
          --build-arg VITE_REACT_APP_ANALYTICS_KEY=${{ secrets.VITE_REACT_APP_ANALYTICS_KEY }} \
          --build-arg VITE_IPFS_API_KEY=${{ secrets.VITE_IPFS_API_KEY }} \
          --build-arg VITE_ETHERSCAN_API_KEY=${{ secrets.VITE_ETHERSCAN_API_KEY }} \
          --build-arg VITE_INFURA_GOERLI_PROJECT_ID=${{secrets.VITE_INFURA_GOERLI_PROJECT_ID}} \
          --build-arg VITE_INFURA_MAINNET_PROJECT_ID=${{secrets.VITE_INFURA_MAINNET_PROJECT_ID}} \
          --build-arg NODE_OPTIONS='--max-old-space-size=6656' \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          --iidfile /tmp/docker-build-push-${{ steps.vars.outputs.DATE_IN_SECS }}/iidfile \
          --provenance mode=max,builder-id=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \
          --metadata-file /tmp/docker-build-push-${{ steps.vars.outputs.DATE_IN_SECS }}/metadata-file \
          --tag ghcr.io/${{ github.repository }}:${{ needs.setup-env-vars.outputs.branch_prefix }} \
          --tag ghcr.io/${{ github.repository }}:commit-${{ steps.vars.outputs.GIT_HASH_SHORT }} \
          --tag ghcr.io/${{ github.repository }}:webapp-${{ needs.setup-env-vars.outputs.branch_prefix }}-${{ steps.vars.outputs.DATE_IN_SECS }}

      # - name: Build and Push to GitHub Container Registry
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     file: ./Dockerfile.webapp.dev
      #     #shm-size: 8g
      #     build-args: |
      #       COMMIT_SHA=${{ steps.vars.outputs.GIT_HASH_SHORT }}
      #       NODE_ENV=${{ needs.setup-env-vars.outputs.environment }}      ## if use 'production', NODEJS will not install tsdx or tsc
      #       ENVIRONMENT=${{ needs.setup-env-vars.outputs.branch_prefix }}
      #       VITE_REACT_APP_DEPLOY_VERSION=${{ github.sha }}
      #       VITE_REACT_APP_DEPLOY_ENVIRONMENT=${{ needs.setup-env-vars.outputs.environment }}
      #       VITE_REACT_APP_ANALYTICS_KEY=${{ secrets.VITE_REACT_APP_ANALYTICS_KEY }}
      #       VITE_IPFS_API_KEY=${{ secrets.VITE_IPFS_API_KEY }}
      #       VITE_ETHERSCAN_API_KEY=${{ secrets.VITE_ETHERSCAN_API_KEY }}
      #       NODE_OPTIONS='--max-old-space-size=5763'
      #     push: ${{ github.event_name != 'pull_request' }}
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max
      #     tags: |
      #       ghcr.io/${{ github.repository }}:commit-${{ steps.vars.outputs.GIT_HASH_SHORT }}
      #       ghcr.io/${{ github.repository }}:webapp-${{ needs.setup-env-vars.outputs.branch_prefix }}-${{ steps.vars.outputs.DATE_IN_SECS }}

      # - name: Upload sourcemap to Kibana sourcemap endpoint (APM)
      #   env:
      #     COMMIT_SHA: ${{ github.sha }}
      #   run: |
      #     for f in $(find ./dist/assets/ -name *.js.map) ; do 
      #       curl -X POST "https://kibana-sourcemaps.aragon.org/api/apm/sourcemaps" \
      #         -H 'Content-Type: multipart/form-data' \
      #         -H 'kbn-xsrf: true' \
      #         -H 'Authorization: ApiKey ${{ secrets.APM_API_KEY }}' \
      #         -F service_name="zaragoza" \
      #         -F service_version="$COMMIT_SHA" \
      #         -F bundle_filepath="http://localhost/assets/$(basename $f)" \
      #         -F sourcemap=@$f
      #     done
